// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: polls_query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls
  (presentationid, question,pollindex)
VALUES
  ($1, $2, $3)
RETURNING id, presentationid, question, pollindex, createdat
`

type CreatePollParams struct {
	Presentationid uuid.UUID `db:"presentationid"`
	Question       string    `db:"question"`
	Pollindex      int32     `db:"pollindex"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRowContext(ctx, createPoll, arg.Presentationid, arg.Question, arg.Pollindex)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Presentationid,
		&i.Question,
		&i.Pollindex,
		&i.Createdat,
	)
	return i, err
}

const getPoll = `-- name: GetPoll :one
SELECT id, presentationid, question, pollindex, createdat
FROM polls
WHERE id = $1
`

func (q *Queries) GetPoll(ctx context.Context, id uuid.UUID) (Poll, error) {
	row := q.db.QueryRowContext(ctx, getPoll, id)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Presentationid,
		&i.Question,
		&i.Pollindex,
		&i.Createdat,
	)
	return i, err
}

const getPollByPID = `-- name: GetPollByPID :one
SELECT id, presentationid, question, pollindex, createdat
FROM polls
WHERE id = $1 and presentationid = $2
`

type GetPollByPIDParams struct {
	ID             uuid.UUID `db:"id"`
	Presentationid uuid.UUID `db:"presentationid"`
}

func (q *Queries) GetPollByPID(ctx context.Context, arg GetPollByPIDParams) (Poll, error) {
	row := q.db.QueryRowContext(ctx, getPollByPID, arg.ID, arg.Presentationid)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Presentationid,
		&i.Question,
		&i.Pollindex,
		&i.Createdat,
	)
	return i, err
}

const getPresentationPolls = `-- name: GetPresentationPolls :many
SELECT id, question
FROM polls
WHERE presentationid = $1
ORDER BY createdat ASC
`

type GetPresentationPollsRow struct {
	ID       uuid.UUID `db:"id"`
	Question string    `db:"question"`
}

func (q *Queries) GetPresentationPolls(ctx context.Context, presentationid uuid.UUID) ([]GetPresentationPollsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPresentationPolls, presentationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPresentationPollsRow
	for rows.Next() {
		var i GetPresentationPollsRow
		if err := rows.Scan(&i.ID, &i.Question); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
