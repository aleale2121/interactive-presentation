// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: polls_vote_query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :exec
INSERT INTO votes
  (pollid, optionkey, clientid)
VALUES
  ($1, $2, $3)
`

type CreateVoteParams struct {
	Pollid    uuid.UUID `db:"pollid"`
	Optionkey string    `db:"optionkey"`
	Clientid  string    `db:"clientid"`
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) error {
	_, err := q.db.ExecContext(ctx, createVote, arg.Pollid, arg.Optionkey, arg.Clientid)
	return err
}

const getVote = `-- name: GetVote :many
SELECT v.id AS voteID, v.pollid, o.id AS optionid, o.optionkey, o.optionvalue, v.clientid
FROM votes AS v
  JOIN options AS o ON v.optionkey = o.optionkey
WHERE v.pollid = $1
`

type GetVoteRow struct {
	Voteid      uuid.UUID `db:"voteid"`
	Pollid      uuid.UUID `db:"pollid"`
	Optionid    uuid.UUID `db:"optionid"`
	Optionkey   string    `db:"optionkey"`
	Optionvalue string    `db:"optionvalue"`
	Clientid    string    `db:"clientid"`
}

func (q *Queries) GetVote(ctx context.Context, pollid uuid.UUID) ([]GetVoteRow, error) {
	rows, err := q.db.QueryContext(ctx, getVote, pollid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVoteRow
	for rows.Next() {
		var i GetVoteRow
		if err := rows.Scan(
			&i.Voteid,
			&i.Pollid,
			&i.Optionid,
			&i.Optionkey,
			&i.Optionvalue,
			&i.Clientid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
